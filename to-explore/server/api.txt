PER MAGGIOR FACILITA' NEI BODY DELLE RICHIESTE INSERIRE
OGGETTI JSON.stringificati
------------------------------------------------------------------

localhost:3001/login ----->GET

RISPOSTA----> array di {user}

-----------------------------------------------------------------

localhost:3001/login/post ----->POST

RICHIESTA:
//ESEMPIO DI BODY CHE ARRIVA DALLA REGISTRAZIONE
// {
//   "username": "string",   -----> se già esistente non viene inserito
//   "mail": "string",         -----> se già esistente non viene inserito
//   "password": "string",
//   "avatar": "string",
//   "color": "string",
// }

RISPOSTA: se tutto ok
{
  success: true,
  text: "Registrazione completata con successo"
}

RISPOSTA: se non va
{
  success: false,
  text: "qualcosa non va, controlla i dati inseriti",
}


------------------------------------------------------------------

localhost:3001/login/put ----->PUT
RICHIESTA:
//ESEMPIO DI BODY CHE ARRIVA DAL CAMBIO COLORE AVATAR
// {
//   "username": "string",
//   "color": "string",
// }

RISPOSTA: se tutto ok
{
    success: true,
    text: "The avatar color is changed!"
}

RISPOSTA: se utente non trovato
{
    success: false,
    text: "username not found"
}


------------------------------------------------------------------
localhost:3001/posts ----->GET

RISPOSTA ----> tutto l' array di {pubblicazioni} ----> reverse


------------------------------------------------------------------



localhost:3001/posts/region/NOMEREGIONE ----->GET

RISPOSTA ---> array di {pubblicazioni} solo della regione inserita


------------------------------------------------------------------

localhost:3001/posts/username/NOMEUTENTE ----->GET

RISPOSTA ---> array di {pubblicazioni} solo dell'username inserita



------------------------------------------------------------------


localhost:3001/comments/commentlist ---> post
//ESEMPIO DI BODY CHE ARRIVA IN /COMMENTLIST
//
// {"postId":"1"} ---- TUTTO A STRINGA
//
// ESEMPIO RISPOSTA
// {
//     "success": true,
//     "commentPost":  [
//                       {
//                         user: "giggio",
//                         avatar: "GG",
//                         avatarColor: "blue",
//                         text: "Ci sono stato anche io!",
//                       },
//                       {
//                         user: "albertino",
//                         avatar: "AA",
//                         avatarColor: "red",
//                         text: "come sei stato?",
//                       },
//                       {
//                         user: "giggiolone",
//                         avatar: "GI",
//                         avatarColor: "green",
//                         text: "grandissimo!",
//                       },
//                     ]
// }

-------------------------------------------------------------------

localhost:3001/comments/commentpush ------>post
// ESEMPIO DI BODY CHE ARRIVA IN /COMMENTPUSH
// {
//     "postId":"1",
//     "user":"giggiolone",
//     "avatar":"GI",
//     "avatarColor": "green",
//     "text":"grandissimo!"
// }
//
// ESEMPIO DI RISPOSTA
// {
//     "success": true,
//     "text": "commento pubblicato"
// }



------------------------------------------------------------------
-localhost:3001/posts/delete    ---------> DELETE

//ESEMPIO DI BODY CHE ARRIVA
//
// {"id":"1"}

 CANCELLA IL POST CON ID INVIATO DAL CLIENT
------------------------------------------------------------------

-localhost:3001/comments/delete ---------> DELETE
//ESEMPIO DI BODY CHE ARRIVA
//
//{"commentId":"971f7651-b204-46a5-a0c8-7559807644cf"}

CANCELLA IL COMMENTO CON ID INVIATO DAL CLIENT



------------------------------------------------------------

_:_:_:_:::_:_:_work in progress:_:_:_:::_:_

like API
  array esempio per gestione like
{
username1:[idcard1,idcard2,idcard3],
username2:[idcard2,idcard4,idcard6],
username3:[idcard5,idcard8,idcard10],
username4:[idcard9,idcard17,idcard12],
}

- 1 prima api memorizza il like al click --->>TIPO POST-----
riceve dal body:
{
 username : userCheHaMessoLike,
 post : idDelPostCheHaMessoLike,
}
il server controlla se esiste l'user nell'oggetto,
se non esiste lo crea con array vuoto,
dopodichè fa il push del nuovo postID.
se esiste gia fa solo il push del postID


- 2 seconda api cancella il like al click --->>TIPO DELETE----
riceve dal body:
{
 username : userCheHaToltoLike,
 post : idDelPostCheHaToltoLike,
}

- 3 terza api serve alla card al didmount per sapere
 se l'utente loggato ha
  messo like su quel post --->>tipo GET con body
riceve dal body:
{
  username: userLoggato
  post : idDelPost
}
e
invia come risposta un booleano




